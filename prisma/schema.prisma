// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

// create a verification token model
model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Models
enum Role {
    USER
    ADMIN
}

model User {
    id              String    @id @default(cuid())
    name            String
    email           String    @unique
    phone           String
    gender          String
    role            Role      @default(USER)
    age             String
    state           String
    district        String
    jnv             String
    passoutYear     Int
    occupation      String
    currentLocation String
    password        String
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    jobs            Job[] // Relationship with the Job model
    accounts        Account[]
    session         Session[]
    // Account         Account[]
}

model Job {
    id             Int      @id @default(autoincrement())
    companyName    String?
    jobTitle       String
    jobDescription String
    jobLink        String
    jobSector      String
    industry       String
    location       String?
    workMode       String   @default("in office")
    assistType     String   @default("Providing information only")
    userId         String   @map("user_id") // Foreign key referencing User.id
    user           User     @relation(fields: [userId], references: [id])
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    // contact
    email          String
    linkedin       String?
    facebook       String?
    instagram      String?
    twitter        String?
    //salaryRange
    minSalary      String
    maxSalary      String?
    //experience
    minExperience  String
    maxExperience  String?
    postedBy       String
    // salaryRange    SalaryRange? @relation(fields: [salaryRangeId], references: [id])
    // experience     Experience?  @relation(fields: [experienceId], references: [id])
    // contact        Contact?     @relation(fields: [contactId], references: [id])
    // contactId      Int?
    // salaryRangeId  Int?
    // experienceId   Int?

    @@index([userId])
}

// model SalaryRange {
//     id    Int     @id @unique @default(autoincrement())
//     min   String
//     max   String?
//     jobId Int // Foreign key referencing Job.id 
//     Job   Job[]
// }

// model Experience {
//     id    Int     @id @default(autoincrement())
//     min   String
//     max   String?
//     jobId Int // Remove @unique attribute to change it to one-to-many
//     jobs  Job[]
//     // Error parsing attribute "@relation": The relation field `jobs` on Model `Experience` must not specify the `fields` or `references` argument in the @relation attribute. You must only specify it on the opposite field `experience` on model `Job`.
//     // With `relationMode = "prisma"`, no foreign keys are used, so relation fields will not benefit from the index usually created by the relational database under the hood. This can lead to poor performance when querying these fields. We recommend adding an index manually. Learn more at https://pris.ly/d/relation-mode-prisma-indexes" 
// }

// model Contact {
//     id        Int     @id @default(autoincrement())
//     linkedin  String?
//     facebook  String?
//     instagram String?
//     email     String?
//     jobId     Int
//     Job       Job[]
// }
