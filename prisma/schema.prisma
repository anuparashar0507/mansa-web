// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// model Post {
//     id        Int      @id @default(autoincrement())
//     name      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     createdBy   User   @relation(fields: [createdById], references: [id])
//     createdById String

//     @@index([name])
// }

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

// Profile model for additional user details
// model Profile {
//     id         Int     @id @default(autoincrement())
//     userId     String  @unique
//     user       User    @relation(fields: [userId], references: [id])
//     occupation String?
//     status     String? // e.g., "Seeking Opportunities"
//     // Optional fields for future features
//     bio        String?
//     // skills     String[]
//     // interests  String[]
//     // ...other relevant fields
// }

model User {
    id              String    @id @default(cuid())
    name            String
    email           String    @unique
    emailVerified   DateTime?
    accounts        Account[]
    sessions        Session[]
    password        String // Optional due to Next-Auth handling
    phone           String
    gender          String
    currentLocation String
    state           String
    district        String
    jnvName         String
    passoutYear     Int
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    // Relationships
    // jobsPosted                @relation("PostedJobs")
    // jobsApplied               @relation("AppliedJobs")
    // jobsReferred              @relation("ReferredJobs")
    // profile         Profile?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Type model for job types
// model Type {
//     id   String @id @default(cuid())
//     name String
//     jobs Job[]
// }

// Sector model for job sectors
// model Sector {
//     id   String @id @default(cuid())
//     name String
//     jobs Job[]
// }

// Job model with comprehensive fields
// model Job {
//     id                 String   @id @default(cuid())
//     title              String
//     companyName        String
//     description        String
//     link               String?
//     salaryRange        String?
//     experienceRequired String?
//     location           String?
//     type               String   @relation(fields: [typeId], references: [id])
//     typeId             String
//     sector             String   @relation(fields: [sectorId], references: [id])
//     sectorId           String
//     createdAt          DateTime @default(now())
//     updatedAt          DateTime @updatedAt

//     // Relationships
//     postedBy   User   @relation("PostedJobs", fields: [postedById], references: [id])
//     postedById String
//     applicants User[] @relation("AppliedJobs")
//     referrers  User[] @relation("ReferredJobs")
// }
